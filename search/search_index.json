{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection Physics | Gravity | KW1 Assignment Author: capitala61 Date: March 30, 2025 Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation 1.1 Governing Equations of Motion To analyze projectile motion, we start by applying the fundamental laws of motion under constant acceleration, particularly the law of gravity. The two-dimensional motion of a projectile is governed by the following equations: Horizontal Motion The acceleration in the horizontal direction is zero (assuming no air resistance), so the horizontal velocity remains constant. \\[ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t \\] where: \\(x(t)\\) is the horizontal position of the projectile at time \\(t\\) , \\(v_0\\) is the initial velocity, \\(\\theta\\) is the launch angle. Vertical Motion The vertical motion is influenced by gravity. The velocity in the vertical direction is affected by gravitational acceleration ( \\(g\\) ). \\[ y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] where: \\(y(t)\\) is the vertical position of the projectile at time \\(t\\) , \\(g\\) is the acceleration due to gravity (approximately 9.81 m/s\u00b2). 1.2 Solving the Basic Differential Equation To find the time of flight, we focus on the vertical motion. The projectile hits the ground when \\(y(t) = 0\\) . Therefore, we set the vertical displacement equation equal to zero: \\[ v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 = 0 \\] Factorizing the equation: \\[ t \\left( v_0 \\cdot \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 \\] The solutions to this equation are: \\(t = 0\\) (at the moment of launch), \\(t = \\frac{2 v_0 \\cdot \\sin(\\theta)}{g}\\) (the time at which the projectile hits the ground). Thus, the total time of flight \\(T\\) is: \\[ T = \\frac{2 v_0 \\cdot \\sin(\\theta)}{g} \\] 1.3 Horizontal Range of the Projectile Now that we have the time of flight, we can use the horizontal motion equation to find the range of the projectile. The horizontal distance traveled is given by: \\[ R = x(T) = v_0 \\cdot \\cos(\\theta) \\cdot T \\] Substitute \\(T\\) from the earlier equation: \\[ R = v_0 \\cdot \\cos(\\theta) \\cdot \\frac{2 v_0 \\cdot \\sin(\\theta)}{g} \\] Simplify the expression: \\[ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] Thus, the range of the projectile as a function of the launch angle is: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] 1.4 Family of Solutions The general form of the range equation shows that the range depends on several parameters: Initial velocity \\(v_0\\) : The range increases with the square of the initial velocity. Launch angle \\(\\theta\\) : The range is maximized when \\(\\theta = 45^\\circ\\) , as \\(\\sin(2\\theta)\\) reaches its maximum value of 1 at this angle. Gravitational acceleration \\(g\\) : The range decreases with an increase in gravitational acceleration. Thus, the relationship between the angle and the range can be explored by varying these parameters. Key Points The projectile follows a parabolic trajectory. The launch angle \\(\\theta\\) has a significant impact on the horizontal range. For a given initial velocity, the optimal launch angle for maximum range is \\(\\theta = 45^\\circ\\) . Analysis of the Range 1. Investigating the Horizontal Range as a Function of the Angle of Projection 1.1 Range Equation Recap The horizontal range \\(R\\) of a projectile is given by the equation: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] Where: \\(v_0\\) is the initial velocity, \\(\\theta\\) is the launch angle, \\(g\\) is the gravitational acceleration. 1.2 Range as a Function of Angle To investigate how the range depends on the angle of projection, we need to analyze the behavior of the function \\(R(\\theta)\\) for various values of \\(\\theta\\) . The range increases with the sine of \\(2\\theta\\) . This means that the range is maximized when \\(2\\theta = 90^\\circ\\) , which occurs at \\(\\theta = 45^\\circ\\) . At \\(\\theta = 0^\\circ\\) and \\(\\theta = 90^\\circ\\) , the range is zero because \\(\\sin(0^\\circ) = \\sin(180^\\circ) = 0\\) . The general behavior of the range as a function of angle is symmetric, meaning that the range for an angle \\(\\theta\\) is the same as for the angle \\(90^\\circ - \\theta\\) . 1.3 Graphical Representation We can plot \\(R(\\theta)\\) for a given initial velocity \\(v_0\\) and gravitational acceleration \\(g\\) to visualize how the range changes with the launch angle. 2. Analyzing the Influence of Initial Velocity and Gravitational Acceleration 2.1 Effect of Initial Velocity \\(v_0\\) From the range equation: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] The range increases with the square of the initial velocity \\(v_0\\) . This means that for a higher initial velocity, the projectile will travel further for the same angle. The influence of \\(v_0\\) is more significant than the angle, meaning that for the same angle, doubling the initial velocity will quadruple the range. 2.2 Effect of Gravitational Acceleration \\(g\\) Again, from the range equation: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] The range decreases as the gravitational acceleration \\(g\\) increases. This means that in stronger gravitational fields (e.g., on planets with higher gravity), the range will be shorter for the same initial velocity and launch angle. The effect of \\(g\\) is inversely proportional, meaning that for a given initial velocity, increasing the gravitational acceleration reduces the range. 3. Summary of Effects on Range 3.1 Dependence on Launch Angle Range increases as the launch angle increases from \\(0^\\circ\\) to \\(45^\\circ\\) . The maximum range occurs at \\(\\theta = 45^\\circ\\) . The relationship is symmetric around \\(45^\\circ\\) . 3.2 Dependence on Initial Velocity The range increases quadratically with the initial velocity \\(v_0\\) . Doubling the initial velocity results in a fourfold increase in range. 3.3 Dependence on Gravitational Acceleration The range decreases as the gravitational acceleration \\(g\\) increases. The effect is inversely proportional to \\(g\\) . 4. Python Code for Visualizing the Range import numpy as np import matplotlib.pyplot as plt # Constants v0 = 50 g = 9.81 angles_deg = [15, 45, 75] angles_rad = np.radians(angles_deg) # Plot setup plt.figure(figsize=(10, 6)) colors = ['b', 'g', 'r'] # Plot trajectory for each angle for angle_rad, angle_deg, color in zip(angles_rad, angles_deg, colors): t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, 1000) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 plt.plot(x, y, color=color, label=f'Angle = {angle_deg}\u00b0') # Plot customization plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('Projectile Motion Trajectories') plt.grid(True) plt.legend() plt.axhline(0, color='black', linewidth=0.5) plt.axvline(0, color='black', linewidth=0.5) # Save the plot plt.savefig('projectile_motion.png') Practical Applications of Projectile Motion 1. Reflection on Real-World Situations While the basic projectile motion model provides valuable insights into how an object moves through the air, real-world situations often introduce additional complexities that the idealized model does not account for. Below, we explore some real-world scenarios and the adjustments needed for a more accurate description. 1.1 Uneven Terrain Effect of Uneven Terrain : In the ideal model, the projectile is launched from and lands on flat ground. However, in real-world scenarios, the launch or landing height might vary due to uneven terrain. If the launch and landing points are at different heights, the range equation must be modified to account for the difference in elevation. The new range equation with an initial height \\(h_0\\) becomes: \\[R(\\theta) = \\frac{v_0 \\cos(\\theta)}{g} \\left( v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh_0} \\right)\\] Where: \\(h_0\\) is the initial height from which the projectile is launched. Effect of Sloped Terrain : When the terrain is sloped, the trajectory and landing location change based on the angle of the slope. The equation for the range becomes more complex and involves solving for the intersection of the projectile's path with the slope of the ground. 1.2 Air Resistance Impact of Air Resistance : Air resistance (drag) significantly alters the trajectory of a projectile. The ideal model assumes no air resistance, but in real life, air resistance slows down the projectile as it travels. The general form of the motion with drag can be described by the following second-order differential equations: \\( \\(\\frac{d^2x}{dt^2}=-\\frac{C_d\\rho A}{2m}v\\frac{dx}{dt}\\) \\) \\( \\(\\frac{d^2y}{dt^2}=-g-\\frac{C_d\\rho A}{2m}v\\frac{dy}{dt}\\) \\) Where: - \\(C_d\\) is the drag coefficient, - \\(\\rho\\) is the air density, - \\(A\\) is the cross-sectional area of the projectile, - \\(m\\) is the mass of the projectile, - \\(v\\) is the velocity of the projectile. Numerical Methods : Solving these differential equations requires numerical methods such as Euler's method, Runge-Kutta, or other integration techniques. These methods can provide an accurate simulation of the trajectory that accounts for the effects of drag. 1.3 Wind and Environmental Factors Wind Effects : Wind can alter the trajectory of a projectile, either increasing or decreasing its range depending on the wind direction. The wind\u2019s influence on the trajectory can be modeled by adding a velocity term to the equations that represent the wind speed and direction. If the wind velocity is represented by \\(v_w\\) , the horizontal velocity of the projectile becomes: \\( \\(v_x' = v_x + v_w\\) \\) Where: - \\(v_x\\) is the horizontal velocity of the projectile, - \\(v_w\\) is the wind velocity. Temperature and Air Density : The air density \\(\\rho\\) depends on environmental factors such as temperature and pressure. In warmer conditions, the air density decreases, which reduces air resistance and can increase the range of the projectile. 1.4 Real-World Examples Sports : In sports like basketball or soccer, air resistance and launch height are crucial. A basketball shot will differ depending on the angle and initial velocity, but also on the height of the player and the presence of wind. Military and Engineering Applications : In military applications, such as missile trajectories, engineers must account for air resistance, wind, and terrain elevation. High-precision models that include drag and varying gravitational fields are used for accurate targeting. Space Exploration : For objects launched into space, air resistance is negligible at high altitudes, but gravitational variation (due to Earth's curvature) and velocity are still factors that affect trajectory calculations. Implementation of Projectile Motion Simulation 1. Developing a Computational Tool To simulate projectile motion and visualize the range as a function of the angle of projection, we need to use a computational approach that considers the basic equations of motion. The key to building this simulation involves solving the projectile's motion under the influence of gravity and accounting for various parameters such as initial velocity , launch angle , and gravitational acceleration . 1.1 Governing Equations The equations of motion for projectile motion without air resistance are: Horizontal motion: \\( \\(x(t) = v_0 \\cos(\\theta) t\\) \\) Vertical motion: \\( \\(y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2\\) \\) Where: \\(v_0\\) is the initial velocity of the projectile, \\(\\theta\\) is the launch angle, \\(g\\) is the gravitational acceleration, \\(x(t)\\) and \\(y(t)\\) are the horizontal and vertical displacements, respectively. The range \\(R\\) of the projectile (the distance it travels before hitting the ground) can be obtained when the projectile reaches \\(y=0\\) . This condition gives the time of flight as: \\[t_f = \\frac{2 v_0 \\sin(\\theta)}{g}\\] Substituting this into the equation for horizontal motion, we get the range \\(R\\) : \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\] 1.2 Algorithm Design Input Parameters : Initial velocity \\(v_0\\) Launch angle \\(\\theta\\) Gravitational acceleration \\(g\\) Steps : Define the initial conditions (velocity, angle). Use the equations of motion to calculate the horizontal and vertical displacements at each time step. Compute the time of flight and the range \\(R\\) . Visualize the range \\(R\\) for different launch angles by plotting it as a function of the angle of projection. 2. Visualizing the Range as a Function of the Launch Angle To explore how the range changes with different angles of projection, we will create a plot of the range \\(R\\) for a range of angles, keeping the initial velocity and gravitational acceleration constant. Range Equation : \\( \\(R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) \\) This equation will be used to calculate the range for various values of \\(\\theta\\) (from 0\u00b0 to 90\u00b0). 2.1 Python Code Implementation Below is the Python code that simulates the projectile motion and visualizes the range as a function of the launch angle for a given initial velocity ```python import numpy as np import matplotlib.pyplot as plt # Constants v_0 = 20 # Initial velocity in m/s g = 9.81 # Gravitational acceleration in m/s^2 # Function to calculate the range for different launch angles def calculate_range(v_0, g, theta): # Convert angle to radians theta_rad = np.radians(theta) # Range equation R = (v_0**2 * np.sin(2*theta_rad)) / g return R # Launch angles from 0 to 90 degrees angles = np.linspace(0, 90, 100) # Calculate the range for each angle ranges = [calculate_range(v_0, g, angle) for angle in angles] # Plotting the range as a function of the launch angle plt.plot(angles, ranges) plt.title('Projectile Range vs Launch Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#date-march-30-2025","text":"","title":"Date: March 30, 2025"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-governing-equations-of-motion","text":"To analyze projectile motion, we start by applying the fundamental laws of motion under constant acceleration, particularly the law of gravity. The two-dimensional motion of a projectile is governed by the following equations:","title":"1.1 Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"The acceleration in the horizontal direction is zero (assuming no air resistance), so the horizontal velocity remains constant. \\[ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t \\] where: \\(x(t)\\) is the horizontal position of the projectile at time \\(t\\) , \\(v_0\\) is the initial velocity, \\(\\theta\\) is the launch angle.","title":"Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical motion is influenced by gravity. The velocity in the vertical direction is affected by gravitational acceleration ( \\(g\\) ). \\[ y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] where: \\(y(t)\\) is the vertical position of the projectile at time \\(t\\) , \\(g\\) is the acceleration due to gravity (approximately 9.81 m/s\u00b2).","title":"Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-solving-the-basic-differential-equation","text":"To find the time of flight, we focus on the vertical motion. The projectile hits the ground when \\(y(t) = 0\\) . Therefore, we set the vertical displacement equation equal to zero: \\[ v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 = 0 \\] Factorizing the equation: \\[ t \\left( v_0 \\cdot \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 \\] The solutions to this equation are: \\(t = 0\\) (at the moment of launch), \\(t = \\frac{2 v_0 \\cdot \\sin(\\theta)}{g}\\) (the time at which the projectile hits the ground). Thus, the total time of flight \\(T\\) is: \\[ T = \\frac{2 v_0 \\cdot \\sin(\\theta)}{g} \\]","title":"1.2 Solving the Basic Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-horizontal-range-of-the-projectile","text":"Now that we have the time of flight, we can use the horizontal motion equation to find the range of the projectile. The horizontal distance traveled is given by: \\[ R = x(T) = v_0 \\cdot \\cos(\\theta) \\cdot T \\] Substitute \\(T\\) from the earlier equation: \\[ R = v_0 \\cdot \\cos(\\theta) \\cdot \\frac{2 v_0 \\cdot \\sin(\\theta)}{g} \\] Simplify the expression: \\[ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] Thus, the range of the projectile as a function of the launch angle is: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\]","title":"1.3 Horizontal Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#14-family-of-solutions","text":"The general form of the range equation shows that the range depends on several parameters: Initial velocity \\(v_0\\) : The range increases with the square of the initial velocity. Launch angle \\(\\theta\\) : The range is maximized when \\(\\theta = 45^\\circ\\) , as \\(\\sin(2\\theta)\\) reaches its maximum value of 1 at this angle. Gravitational acceleration \\(g\\) : The range decreases with an increase in gravitational acceleration. Thus, the relationship between the angle and the range can be explored by varying these parameters.","title":"1.4 Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-points","text":"The projectile follows a parabolic trajectory. The launch angle \\(\\theta\\) has a significant impact on the horizontal range. For a given initial velocity, the optimal launch angle for maximum range is \\(\\theta = 45^\\circ\\) .","title":"Key Points"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-investigating-the-horizontal-range-as-a-function-of-the-angle-of-projection","text":"","title":"1. Investigating the Horizontal Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-range-equation-recap","text":"The horizontal range \\(R\\) of a projectile is given by the equation: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] Where: \\(v_0\\) is the initial velocity, \\(\\theta\\) is the launch angle, \\(g\\) is the gravitational acceleration.","title":"1.1 Range Equation Recap"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-range-as-a-function-of-angle","text":"To investigate how the range depends on the angle of projection, we need to analyze the behavior of the function \\(R(\\theta)\\) for various values of \\(\\theta\\) . The range increases with the sine of \\(2\\theta\\) . This means that the range is maximized when \\(2\\theta = 90^\\circ\\) , which occurs at \\(\\theta = 45^\\circ\\) . At \\(\\theta = 0^\\circ\\) and \\(\\theta = 90^\\circ\\) , the range is zero because \\(\\sin(0^\\circ) = \\sin(180^\\circ) = 0\\) . The general behavior of the range as a function of angle is symmetric, meaning that the range for an angle \\(\\theta\\) is the same as for the angle \\(90^\\circ - \\theta\\) .","title":"1.2 Range as a Function of Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-graphical-representation","text":"We can plot \\(R(\\theta)\\) for a given initial velocity \\(v_0\\) and gravitational acceleration \\(g\\) to visualize how the range changes with the launch angle.","title":"1.3 Graphical Representation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analyzing-the-influence-of-initial-velocity-and-gravitational-acceleration","text":"","title":"2. Analyzing the Influence of Initial Velocity and Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-effect-of-initial-velocity-v_0","text":"From the range equation: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] The range increases with the square of the initial velocity \\(v_0\\) . This means that for a higher initial velocity, the projectile will travel further for the same angle. The influence of \\(v_0\\) is more significant than the angle, meaning that for the same angle, doubling the initial velocity will quadruple the range.","title":"2.1 Effect of Initial Velocity \\(v_0\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-effect-of-gravitational-acceleration-g","text":"Again, from the range equation: \\[ R(\\theta) = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} \\] The range decreases as the gravitational acceleration \\(g\\) increases. This means that in stronger gravitational fields (e.g., on planets with higher gravity), the range will be shorter for the same initial velocity and launch angle. The effect of \\(g\\) is inversely proportional, meaning that for a given initial velocity, increasing the gravitational acceleration reduces the range.","title":"2.2 Effect of Gravitational Acceleration \\(g\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-summary-of-effects-on-range","text":"","title":"3. Summary of Effects on Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-dependence-on-launch-angle","text":"Range increases as the launch angle increases from \\(0^\\circ\\) to \\(45^\\circ\\) . The maximum range occurs at \\(\\theta = 45^\\circ\\) . The relationship is symmetric around \\(45^\\circ\\) .","title":"3.1 Dependence on Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-dependence-on-initial-velocity","text":"The range increases quadratically with the initial velocity \\(v_0\\) . Doubling the initial velocity results in a fourfold increase in range.","title":"3.2 Dependence on Initial Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-dependence-on-gravitational-acceleration","text":"The range decreases as the gravitational acceleration \\(g\\) increases. The effect is inversely proportional to \\(g\\) .","title":"3.3 Dependence on Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-python-code-for-visualizing-the-range","text":"import numpy as np import matplotlib.pyplot as plt # Constants v0 = 50 g = 9.81 angles_deg = [15, 45, 75] angles_rad = np.radians(angles_deg) # Plot setup plt.figure(figsize=(10, 6)) colors = ['b', 'g', 'r'] # Plot trajectory for each angle for angle_rad, angle_deg, color in zip(angles_rad, angles_deg, colors): t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, 1000) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 plt.plot(x, y, color=color, label=f'Angle = {angle_deg}\u00b0') # Plot customization plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('Projectile Motion Trajectories') plt.grid(True) plt.legend() plt.axhline(0, color='black', linewidth=0.5) plt.axvline(0, color='black', linewidth=0.5) # Save the plot plt.savefig('projectile_motion.png')","title":"4. Python Code for Visualizing the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications-of-projectile-motion","text":"","title":"Practical Applications of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-reflection-on-real-world-situations","text":"While the basic projectile motion model provides valuable insights into how an object moves through the air, real-world situations often introduce additional complexities that the idealized model does not account for. Below, we explore some real-world scenarios and the adjustments needed for a more accurate description.","title":"1. Reflection on Real-World Situations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-uneven-terrain","text":"Effect of Uneven Terrain : In the ideal model, the projectile is launched from and lands on flat ground. However, in real-world scenarios, the launch or landing height might vary due to uneven terrain. If the launch and landing points are at different heights, the range equation must be modified to account for the difference in elevation. The new range equation with an initial height \\(h_0\\) becomes: \\[R(\\theta) = \\frac{v_0 \\cos(\\theta)}{g} \\left( v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh_0} \\right)\\] Where: \\(h_0\\) is the initial height from which the projectile is launched. Effect of Sloped Terrain : When the terrain is sloped, the trajectory and landing location change based on the angle of the slope. The equation for the range becomes more complex and involves solving for the intersection of the projectile's path with the slope of the ground.","title":"1.1 Uneven Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-air-resistance","text":"Impact of Air Resistance : Air resistance (drag) significantly alters the trajectory of a projectile. The ideal model assumes no air resistance, but in real life, air resistance slows down the projectile as it travels. The general form of the motion with drag can be described by the following second-order differential equations: \\( \\(\\frac{d^2x}{dt^2}=-\\frac{C_d\\rho A}{2m}v\\frac{dx}{dt}\\) \\) \\( \\(\\frac{d^2y}{dt^2}=-g-\\frac{C_d\\rho A}{2m}v\\frac{dy}{dt}\\) \\) Where: - \\(C_d\\) is the drag coefficient, - \\(\\rho\\) is the air density, - \\(A\\) is the cross-sectional area of the projectile, - \\(m\\) is the mass of the projectile, - \\(v\\) is the velocity of the projectile. Numerical Methods : Solving these differential equations requires numerical methods such as Euler's method, Runge-Kutta, or other integration techniques. These methods can provide an accurate simulation of the trajectory that accounts for the effects of drag.","title":"1.2 Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-wind-and-environmental-factors","text":"Wind Effects : Wind can alter the trajectory of a projectile, either increasing or decreasing its range depending on the wind direction. The wind\u2019s influence on the trajectory can be modeled by adding a velocity term to the equations that represent the wind speed and direction. If the wind velocity is represented by \\(v_w\\) , the horizontal velocity of the projectile becomes: \\( \\(v_x' = v_x + v_w\\) \\) Where: - \\(v_x\\) is the horizontal velocity of the projectile, - \\(v_w\\) is the wind velocity. Temperature and Air Density : The air density \\(\\rho\\) depends on environmental factors such as temperature and pressure. In warmer conditions, the air density decreases, which reduces air resistance and can increase the range of the projectile.","title":"1.3 Wind and Environmental Factors"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#14-real-world-examples","text":"Sports : In sports like basketball or soccer, air resistance and launch height are crucial. A basketball shot will differ depending on the angle and initial velocity, but also on the height of the player and the presence of wind. Military and Engineering Applications : In military applications, such as missile trajectories, engineers must account for air resistance, wind, and terrain elevation. High-precision models that include drag and varying gravitational fields are used for accurate targeting. Space Exploration : For objects launched into space, air resistance is negligible at high altitudes, but gravitational variation (due to Earth's curvature) and velocity are still factors that affect trajectory calculations.","title":"1.4 Real-World Examples"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation-of-projectile-motion-simulation","text":"","title":"Implementation of Projectile Motion Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-developing-a-computational-tool","text":"To simulate projectile motion and visualize the range as a function of the angle of projection, we need to use a computational approach that considers the basic equations of motion. The key to building this simulation involves solving the projectile's motion under the influence of gravity and accounting for various parameters such as initial velocity , launch angle , and gravitational acceleration .","title":"1. Developing a Computational Tool"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-governing-equations","text":"The equations of motion for projectile motion without air resistance are: Horizontal motion: \\( \\(x(t) = v_0 \\cos(\\theta) t\\) \\) Vertical motion: \\( \\(y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2\\) \\) Where: \\(v_0\\) is the initial velocity of the projectile, \\(\\theta\\) is the launch angle, \\(g\\) is the gravitational acceleration, \\(x(t)\\) and \\(y(t)\\) are the horizontal and vertical displacements, respectively. The range \\(R\\) of the projectile (the distance it travels before hitting the ground) can be obtained when the projectile reaches \\(y=0\\) . This condition gives the time of flight as: \\[t_f = \\frac{2 v_0 \\sin(\\theta)}{g}\\] Substituting this into the equation for horizontal motion, we get the range \\(R\\) : \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\]","title":"1.1 Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-algorithm-design","text":"Input Parameters : Initial velocity \\(v_0\\) Launch angle \\(\\theta\\) Gravitational acceleration \\(g\\) Steps : Define the initial conditions (velocity, angle). Use the equations of motion to calculate the horizontal and vertical displacements at each time step. Compute the time of flight and the range \\(R\\) . Visualize the range \\(R\\) for different launch angles by plotting it as a function of the angle of projection.","title":"1.2 Algorithm Design"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-visualizing-the-range-as-a-function-of-the-launch-angle","text":"To explore how the range changes with different angles of projection, we will create a plot of the range \\(R\\) for a range of angles, keeping the initial velocity and gravitational acceleration constant. Range Equation : \\( \\(R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) \\) This equation will be used to calculate the range for various values of \\(\\theta\\) (from 0\u00b0 to 90\u00b0).","title":"2. Visualizing the Range as a Function of the Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-python-code-implementation","text":"","title":"2.1 Python Code Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#below-is-the-python-code-that-simulates-the-projectile-motion-and-visualizes-the-range-as-a-function-of-the-launch-angle-for-a-given-initial-velocity","text":"```python import numpy as np import matplotlib.pyplot as plt # Constants v_0 = 20 # Initial velocity in m/s g = 9.81 # Gravitational acceleration in m/s^2 # Function to calculate the range for different launch angles def calculate_range(v_0, g, theta): # Convert angle to radians theta_rad = np.radians(theta) # Range equation R = (v_0**2 * np.sin(2*theta_rad)) / g return R # Launch angles from 0 to 90 degrees angles = np.linspace(0, 90, 100) # Calculate the range for each angle ranges = [calculate_range(v_0, g, angle) for angle in angles] # Plotting the range as a function of the launch angle plt.plot(angles, ranges) plt.title('Projectile Range vs Launch Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.show()","title":"Below is the Python code that simulates the projectile motion and visualizes the range as a function of the launch angle for a given initial velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Forced Damped Pendulum: Dynamics and Analysis 1. Theoretical Framework The forced damped pendulum is modeled by a second-order nonlinear ordinary differential equation (ODE) describing angular displacement under damping and periodic external forcing. 1.1 Governing Equation The equation of motion is: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\sin\\theta=A\\cos(\\omega t)\\] Variables : \\(\\theta(t)\\) : Angular displacement (radians) \\(b\\) : Damping coefficient (s \\(^{-1}\\) ) \\(g\\) : Gravitational acceleration (m/s \\(^2\\) ) \\(L\\) : Pendulum length (m) \\(A\\) : Driving amplitude (s \\(^{-2}\\) ) \\(\\omega\\) : Driving frequency (rad/s) 1.2 Small-Angle Approximation For small angles ( \\(\\theta\\ll 1\\) ), the nonlinear term simplifies: \\[\\sin\\theta\\approx\\theta\\] This yields a linear ODE: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\theta=A\\cos(\\omega t)\\] 1.3 Solution to Linearized Equation The solution combines homogeneous and particular components: Homogeneous Solution : The characteristic equation is: \\( \\(r^2+br+(g/L)=0\\) \\) Roots are: \\( \\(r_{1,2}=(-b\\pm\\sqrt{b^2-4(g/L)})/2\\) \\) The homogeneous solution is: \\[\\theta_h(t)=C_1e^{r_1t}+C_2e^{r_2t}\\] For underdamped systems ( \\(b^2<4(g/L)\\) ): \\[\\theta_h(t)=e^{-(b/2)t}(C_1\\cos(\\omega_dt)+C_2\\sin(\\omega_dt))\\] Where damped frequency is: \\[\\omega_d=\\sqrt{(g/L)-(b^2/4)}\\] Particular Solution : Assume a steady-state form: \\[\\theta_p(t)=B\\cos(\\omega t-\\delta)\\] The amplitude \\(B\\) is: \\[B=A/\\sqrt{((g/L)-\\omega^2)^2+(b\\omega)^2}\\] The phase shift \\(\\delta\\) is: \\[\\tan\\delta=(b\\omega)/((g/L)-\\omega^2)\\] 1.3.1 Pendulum Motion Visualization The time evolution of \\(\\theta(t)\\) illustrates the combined effects of damping and external forcing, as described by the nonlinear ODE: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\sin\\theta=A\\cos(\\omega t)\\] The following Python code solves this ODE numerically using parameters \\(g=9.81\\) m/s \\(^2\\) , \\(L=1\\) m, \\(b=0.2\\) s \\(^{-1}\\) , \\(A=0.5\\) s \\(^{-2}\\) , and \\(\\omega=0.8\\sqrt{g/L}\\) , plotting \\(\\theta(t)\\) over time. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint Additional Visualization: Simple Pendulum Motion (Undamped, No Forcing) To further illustrate the basic pendulum dynamics without damping ( \\(b=0\\) ) and without external forcing ( \\(A=0\\) ), we plot \\(\\theta(t)\\) over time for small initial displacement. This captures the pure periodic motion expected from an ideal pendulum. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Simple pendulum parameters b = 0.0 # damping A = 0.0 # forcing omega_f = 0.0 g = 9.81 L = 1.0 def simple_pendulum(t, y): theta, omega = y dydt = [omega, -(g/L)*np.sin(theta)] return dydt # Time points t_span = (0, 20) t_eval = np.linspace(*t_span, 1000) y0 = [0.2, 0.0] # initial conditions: [angle, angular velocity] # Solve sol = solve_ivp(simple_pendulum, t_span, y0, t_eval=t_eval) # Plot fig, axs = plt.subplots(1,2, figsize=(12,5)) axs[0].plot(sol.t, sol.y[0], 'r') axs[0].set_title('Simple Pendulum - Time Series') axs[0].set_xlabel('Time (s)') axs[0].set_ylabel('Angle (rad)') axs[1].plot(sol.y[0], sol.y[1], 'r') axs[1].set_title('Simple Pendulum - Phase Portrait') axs[1].set_xlabel('Angle (rad)') axs[1].set_ylabel('Angular Velocity (rad/s)') plt.tight_layout() plt.show() 1.4 Resonance Resonance occurs when \\(\\omega\\) approaches the natural frequency: \\[\\omega_0=\\sqrt{g/L}\\] Undamped Case ( \\(b=0\\) ): \\[B\\to\\infty\\text{ as }\\omega\\to\\omega_0\\] Damped Case : Maximum amplitude occurs at: \\[\\omega_{\\text{res}}=\\sqrt{\\omega_0^2-(b^2/2)}\\] With maximum amplitude: \\[B_{\\text{max}}=A/(b\\sqrt{\\omega_0^2-(b^2/4)})\\] #### 1.4.1 Resonance Curve Visualization The resonance curve plots the steady-state amplitude \\(B\\) against driving frequency \\(\\omega\\) , as given by: \\[B=A/\\sqrt{((g/L)-\\omega^2)^2+(b\\omega)^2}\\] The following Python code computes \\(B\\) for \\(\\omega\\) from 0.1 to 5 rad/s, with \\(g=9.81\\) m/s \\(^2\\) , \\(L=1\\) m, \\(b=0.2\\) s \\(^{-1}\\) , and \\(A=0.5\\) s \\(^{-2}\\) . ```python import numpy as np import matplotlib.pyplot as plt Parameters g = 9.81 L = 1.0 b = 0.2 A = 0.5 Frequency range omega = np.linspace(0.1, 5, 500) Amplitude B B = A / np.sqrt(((g/L) - omega 2) 2 + (b omega) *2) Plot plt.figure(figsize=(8, 5)) plt.plot(omega, B, label=r'Amplitude \\(B\\) ') plt.xlabel(r'Driving Frequency \\(\\omega\\) (rad/s)') plt.ylabel(r'Amplitude \\(B\\) (rad)') plt.title('Resonance Curve of Forced Damped Pendulum') plt.grid(True) plt.legend() plt.show() 1.5 Energy Dynamics Total mechanical energy is: \\[E(t)=(1/2)mL^2(d\\theta/dt)^2+mgL(1-\\cos\\theta)\\] At resonance: Undamped: Energy grows without bound. Damped: Energy balances input and dissipation, yielding: \\[E_{\\text{steady}}\\approx(1/2)mL^2B^2\\omega^2\\] 1.6 Summary The nonlinear ODE governs pendulum motion. Small-angle approximation linearizes the system. Solutions include damped and forced components. Resonance amplifies oscillations, moderated by damping. 2. Parametric Effects This section analyzes how parameters affect dynamics, focusing on damping, driving amplitude, and frequency. 2.1 Damping Coefficient ( \\(b\\) ) Damping influences oscillation decay: Low \\(b\\) : Sustained oscillations. Solution approximates undamped case: \\[\\theta(t)\\approx B\\cos(\\omega t-\\delta)\\] High \\(b\\) : Rapid decay to equilibrium. Overdamped solution ( \\(b^2>4(g/L)\\) ): \\[\\theta(t)=C_1e^{r_1t}+C_2e^{r_2t}\\] 2.2 Driving Amplitude ( \\(A\\) ) The amplitude \\(A\\) scales the external force: Small \\(A\\) : Oscillations decay unless near resonance. Amplitude scales linearly: \\[B\\propto A\\] Large \\(A\\) : Increases steady-state amplitude: \\[B=A/\\sqrt{((g/L)-\\omega^2)^2+(b\\omega)^2}\\] 2.3 Driving Frequency ( \\(\\omega\\) ) Frequency determines forcing efficiency: Near \\(\\omega_0\\) : Large oscillations due to resonance. Amplitude peaks at \\(\\omega_{\\text{res}}\\) . Far from \\(\\omega_0\\) : Reduced amplitude: \\[B\\approx A/|(g/L)-\\omega^2|\\] 2.4 Chaos and Nonlinearity For large \\(A\\) or specific \\(\\omega\\) , the nonlinear \\(\\sin\\theta\\) term induces chaos: Periodic Motion : Stable at low \\(A\\) , described by: \\[\\theta(t)\\approx B\\cos(\\omega t-\\delta)\\] Chaotic Motion : Sensitive to initial conditions. Characterized by positive Lyapunov exponent: \\[\\lambda>0\\] 2.5 Visualization Tools Phase Portrait : Plots \\(\\theta\\) vs. \\(d\\theta/dt\\) . Periodic motion: Closed loops. Chaotic motion: Irregular patterns. The following Python code generates a phase portrait for the pendulum with \\(g=9.81\\) m/s \\(^2\\) , \\(L=1\\) m, \\(b=0.2\\) s \\(^{-1}\\) , \\(A=0.5\\) s \\(^{-2}\\) , and \\(\\omega=0.8\\sqrt{g/L}\\) , showing a closed loop indicative of periodic motion. ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint Parameters g = 9.81 L = 1.0 b = 0.2 A = 0.5 omega = 0.8 * np.sqrt(g/L) ODE system def pendulum(state, t, b, g, L, A, omega): theta, omega = state dtheta_dt = omega domega_dt = -b omega - (g/L) np.sin(theta) + A np.cos(omega t) return [dtheta_dt, domega_dt] Time array t = np.linspace(0, 20, 1000) Initial conditions state0 = [0.1, 0.0] Solve ODE solution = odeint(pendulum, state0, t, args=(b, g, L, A, omega)) theta = solution[:, 0] dtheta_dt = solution[:, 1] Plot plt.figure(figsize=(8, 5)) plt.plot(theta, dtheta_dt, label=r\" \\(\\text{Phase Trajectory}\\) \") plt.xlabel(r\" \\(\\theta\\) (rad)\") plt.ylabel(r\" \\(\\frac{d\\theta}{dt}\\) (rad/s)\") plt.title(r\" \\(\\text{Phase Portrait of Forced Damped Pendulum}\\) \") plt.grid(True) plt.legend() plt.show() Poincar\u00e9 Section Description: Samples at \\(t=2\\pi n/\\omega\\) . Periodic: Discrete points. Chaotic: Scattered points. 2.6 Summary Damping controls oscillation decay. Amplitude scales forcing strength. Frequency drives resonance or chaos. Nonlinear effects lead to complex dynamics. 3. Applications The model applies to systems with oscillatory dynamics. 3.1 Energy Harvesting Vibrational harvesters convert motion to energy: Model : Driving force: Ambient vibrations. Power output: \\[P=(1/2)mL^2(d\\theta/dt)^2\\] Optimization : Maximize at resonance: \\[\\omega=\\omega_0\\] 3.2 Structural Engineering Bridges oscillate under external loads: Equation : Similar to pendulum: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\sin\\theta=F_{\\text{ext}}(t)\\] Design : Increase \\(b\\) to avoid resonance. 3.3 Electrical Circuits RLC circuits mirror pendulum dynamics: Equation : Charge dynamics: \\[Ld^2q/dt^2+R\\,dq/dt+(1/C)q=V_{\\text{ext}}(t)\\] Resonance : Maximizes current at: \\[\\omega=1/\\sqrt{LC}\\] 3.4 Summary Energy harvesting optimizes power at resonance. Structures require damping to prevent failure. Circuits control resonance for stability.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-dynamics-and-analysis","text":"","title":"Forced Damped Pendulum: Dynamics and Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-framework","text":"The forced damped pendulum is modeled by a second-order nonlinear ordinary differential equation (ODE) describing angular displacement under damping and periodic external forcing.","title":"1. Theoretical Framework"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-governing-equation","text":"The equation of motion is: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\sin\\theta=A\\cos(\\omega t)\\] Variables : \\(\\theta(t)\\) : Angular displacement (radians) \\(b\\) : Damping coefficient (s \\(^{-1}\\) ) \\(g\\) : Gravitational acceleration (m/s \\(^2\\) ) \\(L\\) : Pendulum length (m) \\(A\\) : Driving amplitude (s \\(^{-2}\\) ) \\(\\omega\\) : Driving frequency (rad/s)","title":"1.1 Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-small-angle-approximation","text":"For small angles ( \\(\\theta\\ll 1\\) ), the nonlinear term simplifies: \\[\\sin\\theta\\approx\\theta\\] This yields a linear ODE: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\theta=A\\cos(\\omega t)\\]","title":"1.2 Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#13-solution-to-linearized-equation","text":"The solution combines homogeneous and particular components: Homogeneous Solution : The characteristic equation is: \\( \\(r^2+br+(g/L)=0\\) \\) Roots are: \\( \\(r_{1,2}=(-b\\pm\\sqrt{b^2-4(g/L)})/2\\) \\) The homogeneous solution is: \\[\\theta_h(t)=C_1e^{r_1t}+C_2e^{r_2t}\\] For underdamped systems ( \\(b^2<4(g/L)\\) ): \\[\\theta_h(t)=e^{-(b/2)t}(C_1\\cos(\\omega_dt)+C_2\\sin(\\omega_dt))\\] Where damped frequency is: \\[\\omega_d=\\sqrt{(g/L)-(b^2/4)}\\] Particular Solution : Assume a steady-state form: \\[\\theta_p(t)=B\\cos(\\omega t-\\delta)\\] The amplitude \\(B\\) is: \\[B=A/\\sqrt{((g/L)-\\omega^2)^2+(b\\omega)^2}\\] The phase shift \\(\\delta\\) is: \\[\\tan\\delta=(b\\omega)/((g/L)-\\omega^2)\\]","title":"1.3 Solution to Linearized Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#131-pendulum-motion-visualization","text":"The time evolution of \\(\\theta(t)\\) illustrates the combined effects of damping and external forcing, as described by the nonlinear ODE: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\sin\\theta=A\\cos(\\omega t)\\] The following Python code solves this ODE numerically using parameters \\(g=9.81\\) m/s \\(^2\\) , \\(L=1\\) m, \\(b=0.2\\) s \\(^{-1}\\) , \\(A=0.5\\) s \\(^{-2}\\) , and \\(\\omega=0.8\\sqrt{g/L}\\) , plotting \\(\\theta(t)\\) over time. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint","title":"1.3.1 Pendulum Motion Visualization"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#additional-visualization-simple-pendulum-motion-undamped-no-forcing","text":"To further illustrate the basic pendulum dynamics without damping ( \\(b=0\\) ) and without external forcing ( \\(A=0\\) ), we plot \\(\\theta(t)\\) over time for small initial displacement. This captures the pure periodic motion expected from an ideal pendulum.","title":"Additional Visualization: Simple Pendulum Motion (Undamped, No Forcing)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_1","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Simple pendulum parameters b = 0.0 # damping A = 0.0 # forcing omega_f = 0.0 g = 9.81 L = 1.0 def simple_pendulum(t, y): theta, omega = y dydt = [omega, -(g/L)*np.sin(theta)] return dydt # Time points t_span = (0, 20) t_eval = np.linspace(*t_span, 1000) y0 = [0.2, 0.0] # initial conditions: [angle, angular velocity] # Solve sol = solve_ivp(simple_pendulum, t_span, y0, t_eval=t_eval) # Plot fig, axs = plt.subplots(1,2, figsize=(12,5)) axs[0].plot(sol.t, sol.y[0], 'r') axs[0].set_title('Simple Pendulum - Time Series') axs[0].set_xlabel('Time (s)') axs[0].set_ylabel('Angle (rad)') axs[1].plot(sol.y[0], sol.y[1], 'r') axs[1].set_title('Simple Pendulum - Phase Portrait') axs[1].set_xlabel('Angle (rad)') axs[1].set_ylabel('Angular Velocity (rad/s)') plt.tight_layout() plt.show()","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#14-resonance","text":"Resonance occurs when \\(\\omega\\) approaches the natural frequency: \\[\\omega_0=\\sqrt{g/L}\\] Undamped Case ( \\(b=0\\) ): \\[B\\to\\infty\\text{ as }\\omega\\to\\omega_0\\] Damped Case : Maximum amplitude occurs at: \\[\\omega_{\\text{res}}=\\sqrt{\\omega_0^2-(b^2/2)}\\] With maximum amplitude: \\[B_{\\text{max}}=A/(b\\sqrt{\\omega_0^2-(b^2/4)})\\] #### 1.4.1 Resonance Curve Visualization The resonance curve plots the steady-state amplitude \\(B\\) against driving frequency \\(\\omega\\) , as given by: \\[B=A/\\sqrt{((g/L)-\\omega^2)^2+(b\\omega)^2}\\] The following Python code computes \\(B\\) for \\(\\omega\\) from 0.1 to 5 rad/s, with \\(g=9.81\\) m/s \\(^2\\) , \\(L=1\\) m, \\(b=0.2\\) s \\(^{-1}\\) , and \\(A=0.5\\) s \\(^{-2}\\) .","title":"1.4 Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_2","text":"```python import numpy as np import matplotlib.pyplot as plt","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"g = 9.81 L = 1.0 b = 0.2 A = 0.5","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#frequency-range","text":"omega = np.linspace(0.1, 5, 500)","title":"Frequency range"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#amplitude-b","text":"B = A / np.sqrt(((g/L) - omega 2) 2 + (b omega) *2)","title":"Amplitude B"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot","text":"plt.figure(figsize=(8, 5)) plt.plot(omega, B, label=r'Amplitude \\(B\\) ') plt.xlabel(r'Driving Frequency \\(\\omega\\) (rad/s)') plt.ylabel(r'Amplitude \\(B\\) (rad)') plt.title('Resonance Curve of Forced Damped Pendulum') plt.grid(True) plt.legend() plt.show()","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#15-energy-dynamics","text":"Total mechanical energy is: \\[E(t)=(1/2)mL^2(d\\theta/dt)^2+mgL(1-\\cos\\theta)\\] At resonance: Undamped: Energy grows without bound. Damped: Energy balances input and dissipation, yielding: \\[E_{\\text{steady}}\\approx(1/2)mL^2B^2\\omega^2\\]","title":"1.5 Energy Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#16-summary","text":"The nonlinear ODE governs pendulum motion. Small-angle approximation linearizes the system. Solutions include damped and forced components. Resonance amplifies oscillations, moderated by damping.","title":"1.6 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-parametric-effects","text":"This section analyzes how parameters affect dynamics, focusing on damping, driving amplitude, and frequency.","title":"2. Parametric Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-damping-coefficient-b","text":"Damping influences oscillation decay: Low \\(b\\) : Sustained oscillations. Solution approximates undamped case: \\[\\theta(t)\\approx B\\cos(\\omega t-\\delta)\\] High \\(b\\) : Rapid decay to equilibrium. Overdamped solution ( \\(b^2>4(g/L)\\) ): \\[\\theta(t)=C_1e^{r_1t}+C_2e^{r_2t}\\]","title":"2.1 Damping Coefficient (\\(b\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-driving-amplitude-a","text":"The amplitude \\(A\\) scales the external force: Small \\(A\\) : Oscillations decay unless near resonance. Amplitude scales linearly: \\[B\\propto A\\] Large \\(A\\) : Increases steady-state amplitude: \\[B=A/\\sqrt{((g/L)-\\omega^2)^2+(b\\omega)^2}\\]","title":"2.2 Driving Amplitude (\\(A\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#23-driving-frequency-omega","text":"Frequency determines forcing efficiency: Near \\(\\omega_0\\) : Large oscillations due to resonance. Amplitude peaks at \\(\\omega_{\\text{res}}\\) . Far from \\(\\omega_0\\) : Reduced amplitude: \\[B\\approx A/|(g/L)-\\omega^2|\\]","title":"2.3 Driving Frequency (\\(\\omega\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#24-chaos-and-nonlinearity","text":"For large \\(A\\) or specific \\(\\omega\\) , the nonlinear \\(\\sin\\theta\\) term induces chaos: Periodic Motion : Stable at low \\(A\\) , described by: \\[\\theta(t)\\approx B\\cos(\\omega t-\\delta)\\] Chaotic Motion : Sensitive to initial conditions. Characterized by positive Lyapunov exponent: \\[\\lambda>0\\]","title":"2.4 Chaos and Nonlinearity"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#25-visualization-tools","text":"Phase Portrait : Plots \\(\\theta\\) vs. \\(d\\theta/dt\\) . Periodic motion: Closed loops. Chaotic motion: Irregular patterns. The following Python code generates a phase portrait for the pendulum with \\(g=9.81\\) m/s \\(^2\\) , \\(L=1\\) m, \\(b=0.2\\) s \\(^{-1}\\) , \\(A=0.5\\) s \\(^{-2}\\) , and \\(\\omega=0.8\\sqrt{g/L}\\) , showing a closed loop indicative of periodic motion. ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint","title":"2.5 Visualization Tools"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters_1","text":"g = 9.81 L = 1.0 b = 0.2 A = 0.5 omega = 0.8 * np.sqrt(g/L)","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#ode-system","text":"def pendulum(state, t, b, g, L, A, omega): theta, omega = state dtheta_dt = omega domega_dt = -b omega - (g/L) np.sin(theta) + A np.cos(omega t) return [dtheta_dt, domega_dt]","title":"ODE system"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-array","text":"t = np.linspace(0, 20, 1000)","title":"Time array"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"state0 = [0.1, 0.0]","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solve-ode","text":"solution = odeint(pendulum, state0, t, args=(b, g, L, A, omega)) theta = solution[:, 0] dtheta_dt = solution[:, 1]","title":"Solve ODE"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot_1","text":"plt.figure(figsize=(8, 5)) plt.plot(theta, dtheta_dt, label=r\" \\(\\text{Phase Trajectory}\\) \") plt.xlabel(r\" \\(\\theta\\) (rad)\") plt.ylabel(r\" \\(\\frac{d\\theta}{dt}\\) (rad/s)\") plt.title(r\" \\(\\text{Phase Portrait of Forced Damped Pendulum}\\) \") plt.grid(True) plt.legend() plt.show()","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section-description","text":"","title":"Poincar\u00e9 Section Description:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#samples-at-t2pi-nomega","text":"","title":"Samples at \\(t=2\\pi n/\\omega\\)."},{"location":"1%20Physics/1%20Mechanics/Problem_2/#periodic-discrete-points","text":"","title":"Periodic: Discrete points."},{"location":"1%20Physics/1%20Mechanics/Problem_2/#chaotic-scattered-points","text":"","title":"Chaotic: Scattered points."},{"location":"1%20Physics/1%20Mechanics/Problem_2/#26-summary","text":"Damping controls oscillation decay. Amplitude scales forcing strength. Frequency drives resonance or chaos. Nonlinear effects lead to complex dynamics.","title":"2.6 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-applications","text":"The model applies to systems with oscillatory dynamics.","title":"3. Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#31-energy-harvesting","text":"Vibrational harvesters convert motion to energy: Model : Driving force: Ambient vibrations. Power output: \\[P=(1/2)mL^2(d\\theta/dt)^2\\] Optimization : Maximize at resonance: \\[\\omega=\\omega_0\\]","title":"3.1 Energy Harvesting"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#32-structural-engineering","text":"Bridges oscillate under external loads: Equation : Similar to pendulum: \\[d^2\\theta/dt^2+b\\,d\\theta/dt+(g/L)\\sin\\theta=F_{\\text{ext}}(t)\\] Design : Increase \\(b\\) to avoid resonance.","title":"3.2 Structural Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#33-electrical-circuits","text":"RLC circuits mirror pendulum dynamics: Equation : Charge dynamics: \\[Ld^2q/dt^2+R\\,dq/dt+(1/C)q=V_{\\text{ext}}(t)\\] Resonance : Maximizes current at: \\[\\omega=1/\\sqrt{LC}\\]","title":"3.3 Electrical Circuits"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#34-summary","text":"Energy harvesting optimizes power at resonance. Structures require damping to prevent failure. Circuits control resonance for stability.","title":"3.4 Summary"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 \ud83c\udf0c Deriving Kepler\u2019s Third Law for Circular Orbits Kepler\u2019s Third Law states that the square of the orbital period of a planet is directly proportional to the cube of the semi-major axis of its orbit. For circular orbits, the semi-major axis is equal to the orbital radius. Let's derive this from fundamental physical principles. \u2696\ufe0f Step 1: Newton\u2019s Law of Universal Gravitation Newton's Law of Gravitation gives the attractive force between two masses: \\[F_{\\text{gravity}} = G\\frac{Mm}{r^2}\\] \\(G\\) = Gravitational constant \\(M\\) = Mass of the central body (e.g., Earth or Sun) \\(m\\) = Mass of the orbiting object (e.g., satellite or planet) \\(r\\) = Radius of the circular orbit \ud83d\udd04 Step 2: Centripetal Force for Circular Motion Any object in a circular orbit must experience a centripetal force to stay on its path: \\[F_{\\text{centripetal}} = \\frac{mv^2}{r}\\] \u2696\ufe0f Step 3: Equating Gravitational and Centripetal Forces Since gravity provides the centripetal force: \\[\\frac{mv^2}{r} = G\\frac{Mm}{r^2}\\] Cancel out \\(m\\) (mass of the orbiting body): \\[\\frac{v^2}{r} = G\\frac{M}{r^2}\\] Multiply both sides by \\(r\\) : \\[v^2 = \\frac{GM}{r}\\] \u23f1\ufe0f Step 4: Express Orbital Velocity in Terms of Period Orbital velocity \\(v\\) is the distance traveled in one orbit divided by the orbital period \\(T\\) : \\[v = \\frac{2\\pi r}{T}\\] Substitute into the velocity equation: \\[\\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{GM}{r}\\] Simplify: \\[\\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r}\\] Multiply both sides by \\(r\\) : \\[\\frac{4\\pi^2 r^3}{T^2} = GM\\] \ud83d\udcd0 Final Form: Kepler\u2019s Third Law Rearranging for \\(T^2\\) : \\[T^2 = \\frac{4\\pi^2}{GM} \\cdot r^3\\] \u2705 This is Kepler's Third Law for circular orbits! \\(T^2 \\propto r^3\\) The constant of proportionality depends on the central mass \\(M\\) \ud83e\uddea Python Verification Let's simulate this law using Python. ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of the Earth (kg) Generate orbital radii (in meters) radii = np.linspace(7e6, 4.2e7, 100) # from ~7000 km to ~42000 km Calculate orbital periods T_squared = (4 * np.pi 2 * radii 3) / (G * M) Plotting plt.figure(figsize=(8, 5)) plt.plot(radii, T_squared, label=r' \\(T^2 \\propto r^3\\) ', color='teal') plt.title(\"Kepler\u2019s Third Law: \\(T^2\\) vs \\(r^3\\) \") plt.xlabel(\"Orbital Radius \\(r\\) (m)\") plt.ylabel(\"Orbital Period Squared \\(T^2\\) (s\u00b2)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() \ud83c\udf20 Physical Meaning of Kepler\u2019s Third Law We previously derived Kepler's Third Law for circular orbits: \\[T^2=\\frac{4\\pi^2}{GM}\\cdot r^3\\] This relationship elegantly connects time (orbital period) with space (orbital radius) through the gravitational constant and the mass of the central body . \ud83d\udd0d Interpretation of Each Term \\(T\\) : Orbital period \u2014 how long it takes to complete one full orbit \\(r\\) : Orbital radius \u2014 the distance between the orbiting body and the central mass \\(G\\) : Universal gravitational constant \u2014 governs strength of gravitational interaction \\(M\\) : Mass of the central body (e.g., Earth, Sun) \ud83e\udde0 Physical Insights 1. Gravitational Control of Motion The period \\(T\\) depends only on the mass of the central body \\(M\\) and the radius \\(r\\) of the orbit. The orbiting body\u2019s own mass \\(m\\) does not appear in the final formula \u2014 this reflects the equivalence principle. 2. Increased Radius = Slower Orbit From the formula: \\( \\(T\\propto r^{3/2}\\) \\) Larger orbits take significantly longer to complete. This explains why outer planets (like Neptune) move much slower than inner ones (like Mercury). 3. Scaling and Proportionality A doubling of \\(r\\) increases \\(T\\) by a factor of: \\( \\(T\\propto(2r)^{3/2}=2^{3/2}\\approx2.83\\) \\) Time grows faster than radius \u2014 orbital systems are not linear. \ud83d\udd2d Astronomical Applications \u2705 1. Estimating Masses of Celestial Bodies Rearranging: \\( \\(M=\\frac{4\\pi^2r^3}{GT^2}\\) \\) If we know the radius and period of a satellite or moon, we can compute the mass of the planet/star it orbits. \u2705 2. Predicting Orbital Times Given a known central mass and radius, we can compute how long any object will take to orbit. \u2705 3. Comparing Planetary Systems By comparing \\(T^2/r^3\\) across different systems, we can verify gravitational consistency: \\( \\(\\frac{T^2}{r^3}=\\text{constant for a given }M\\) \\) \ud83e\uddee Python Demonstration: Constant Ratio \\(T^2/r^3\\) Let\u2019s confirm that this ratio is constant for Earth-centered orbits. ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 M = 5.972e24 # kg (mass of Earth) Orbital radii (meters) radii = np.linspace(7e6, 4.2e7, 100) T_squared = (4 * np.pi 2 * radii 3) / (G * M) ratio = T_squared / radii**3 Plot plt.figure(figsize=(8, 5)) plt.plot(radii, ratio, label=r' \\(\\frac{T^2}{r^3}\\) ', color='purple') plt.title(\"Constant Ratio in Kepler\u2019s Third Law\") plt.xlabel(\"Orbital Radius \\(r\\) (m)\") plt.ylabel(\"Ratio \\(T^2 / r^3\\) (s\u00b2/m\u00b3)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() \ud83c\udf0c Astronomical Implications of Kepler\u2019s Third Law Kepler\u2019s Third Law is more than a mathematical curiosity \u2014 it's a powerful tool in astronomy . The relationship: \\[T^2=\\frac{4\\pi^2}{GM}r^3\\] gives us a direct bridge between observable orbital motion and hidden physical properties like mass and distance. \ud83d\udd2d Applications in Astronomy 1. \ud83e\ude90 Determining Planetary Masses We can rearrange Kepler\u2019s Third Law to solve for the mass \\(M\\) of the central body: \\[M=\\frac{4\\pi^2r^3}{GT^2}\\] \u2728 What You Need: \\(r\\) : Orbital radius of a satellite or moon (measurable) \\(T\\) : Orbital period of that satellite (measurable) \\(G\\) : Gravitational constant (known) \ud83e\udde0 Insight: No need to land or probe a planet to determine its mass. Just observe the orbit of something near it! \ud83d\udd2c Example: Mass of Earth from a satellite Satellite orbit radius: \\(r=7.0\\times10^6\\) m Orbital period: \\(T=5800\\) s ```python import numpy as np Given values r = 7.0e6 # meters T = 5800 # seconds G = 6.67430e-11 # m^3 kg^-1 s^-2 Mass of Earth calculation M = (4 * np.pi 2 * r 3) / (G * T**2) print(f\"Estimated mass of Earth: {M:.2e} kg\") \ud83c\udf20 Extending Kepler\u2019s Third Law to Elliptical Orbits and Non-Planetary Bodies Kepler's Third Law for circular orbits provides an elegant relationship between orbital period \\(T\\) and orbital radius \\(r\\) : \\[T^2=\\frac{4\\pi^2}{GM}r^3\\] However, most real-world orbits are elliptical , not circular, and they often involve non-planetary bodies such as moons, satellites, comets, and even artificial objects. Let's explore how Kepler\u2019s Law extends to these scenarios. 1. \ud83c\udf11 Kepler\u2019s Third Law for Elliptical Orbits 1.1. Elliptical Orbits Overview For elliptical orbits, the orbital period \\(T\\) is still related to the semi-major axis \\(a\\) of the ellipse, not the instantaneous orbital radius \\(r\\) . The semi-major axis is the average distance between the orbiting body and the central mass. 1.2. Kepler\u2019s Law for Elliptical Orbits Kepler\u2019s Third Law can be generalized to elliptical orbits as: \\[T^2=\\frac{4\\pi^2a^3}{GM}\\] Where: - \\(a\\) : Semi-major axis of the ellipse - \\(M\\) : Mass of the central body - \\(T\\) : Orbital period This is nearly identical to the formula for circular orbits, except now it uses the semi-major axis \\(a\\) instead of the orbital radius \\(r\\) . 1.3. Why Semi-Major Axis? The semi-major axis \\(a\\) represents the average orbital radius and effectively smooths out the elliptical shape. The orbital period \\(T\\) depends on the average distance rather than instantaneous distance, which is why \\(a\\) is used. 1.4. Elliptical Orbit Example For an elliptical orbit, the orbital period \\(T\\) is the same as it would be for a circular orbit with radius \\(a\\) . 2. \ud83d\ude80 Non-Planetary Bodies: Satellites, Comets, and Exoplanets 2.1. Kepler\u2019s Law for Satellites Satellites orbiting a planet also obey Kepler\u2019s Third Law. The period \\(T\\) of a satellite\u2019s orbit depends on the mass of the planet \\(M\\) and the semi-major axis \\(a\\) of the orbit. Satellite period: \\( \\(T^2=\\frac{4\\pi^2a^3}{GM}\\) \\) 2.2. Comets in the Solar System Comets follow highly elliptical orbits, with a semi-major axis \\(a\\) that places them far from the Sun at one extreme (aphelion) and close at the other extreme (perihelion). Their orbital period still follows the same form: \\( \\(T^2=\\frac{4\\pi^2a^3}{GM_{\\text{sun}}}\\) \\) The Sun\u2019s mass is used for calculating the period, even though the comet\u2019s orbit is highly elliptical. 2.3. Exoplanets Exoplanets orbit distant stars, and their orbital periods depend on the star\u2019s mass \\(M\\) and the orbital semi-major axis \\(a\\) . The orbital period for exoplanets can be calculated using: \\( \\(T^2=\\frac{4\\pi^2a^3}{GM_{\\text{star}}}\\) \\) For exoplanets, the mass of the star is used, and the semi-major axis \\(a\\) refers to the average distance between the exoplanet and its star. 3. \ud83e\udde0 Summary and Insights 3.1. Extension to Elliptical Orbits Kepler's Third Law holds true for elliptical orbits but uses the semi-major axis \\(a\\) instead of \\(r\\) . The orbital period \\(T\\) depends on the average distance between the orbiting body and the central mass. 3.2. Non-Planetary Bodies The law applies to satellites , comets , and exoplanets \u2014 objects that are not planets but still obey the same orbital principles. The central mass \\(M\\) changes depending on whether the object is orbiting a planet or a star . 3.3. Practical Applications Satellite Design: Orbital period and semi-major axis allow engineers to design satellites with desired orbital characteristics. Space Missions: For long-range missions (e.g., to outer planets or moons), Kepler\u2019s Law helps estimate travel times. Astronomical Observation: Kepler\u2019s Law is critical for understanding the dynamics of comet orbits, exoplanet discovery, and the motion of moons. 4. \ud83e\uddee Python Code for Orbital Period of an Elliptical Orbit Let\u2019s calculate the orbital period \\(T\\) for a comet with a highly elliptical orbit. Given the semi-major axis \\(a\\) and central mass \\(M\\) of the Sun: ```python import numpy as np Constants G = 6.67430e-11 # m^3 kg \ud83c\udf0d Real-World Applications of Kepler's Third Law Kepler\u2019s Third Law allows us to predict orbital periods and distances for a variety of celestial bodies. By analyzing real-world examples such as the Moon\u2019s orbit around Earth , planetary orbits (like Earth\u2019s orbit around the Sun), and Jupiter\u2019s moons , we can see the practical utility of this fundamental law. 1. \ud83c\udf19 Moon\u2019s Orbit Around Earth 1.1. Known Values Orbital period \\(T_{\\text{moon}}\\) of the Moon: \\(T_{\\text{moon}} = 27.3\\) days (converted to seconds: \\(T_{\\text{moon}} = 27.3 \\times 86400\\) seconds) Average distance between the Earth and the Moon: \\(r = 3.84 \\times 10^8\\) meters Mass of Earth: \\(M_{\\text{Earth}} = 5.972 \\times 10^{24}\\) kg Using Kepler\u2019s Third Law for the Moon\u2019s orbit around Earth: \\[T^2 = \\frac{4\\pi^2 r^3}{GM_{\\text{Earth}}}\\] 1.2. Orbital Period Calculation We can calculate the orbital period of the Moon by rearranging the above equation to solve for \\(T\\) : \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM_{\\text{Earth}}}}\\] Let\u2019s calculate this in Python: ```python import numpy as np Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant) M_earth = 5.972e24 # kg (mass of Earth) r_moon = 3.84e8 # meters (average distance from Earth to Moon) Orbital period calculation (in seconds) T_moon = 2 * np.pi * np.sqrt(r_moon**3 / (G * M_earth)) T_moon_days = T_moon / (60 * 60 * 24) # Convert from seconds to days print(f\"Orbital period of the Moon: {T_moon_days:.2f} days\") \ud83d\udef0\ufe0f Computational Task: Simulating Circular Orbits In this section, we will build a Python script or Jupyter Notebook to simulate circular orbits based on Kepler's Third Law. The primary focus will be on simulating a circular orbit of a satellite (or any celestial object) around a central body (e.g., a planet or star). Objectives: Derive the relationship between orbital period and orbital radius for circular orbits. Implement a Python code to simulate the orbit. Visualize the orbital motion and calculate the orbital period and orbital radius . 1. \ud83d\udd2d Deriving the Formula for Circular Orbits For a circular orbit, we can combine the concepts of centripetal force and gravitational force . 1.1. Gravitational Force The gravitational force acting on a satellite orbiting around a central body is given by: \\[F_{\\text{gravity}} = \\frac{GMm}{r^2}\\] Where: - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) ). - \\(M\\) is the mass of the central body (e.g., the Sun, Earth). - \\(m\\) is the mass of the orbiting satellite . - \\(r\\) is the orbital radius (distance from the center of the central body to the satellite). 1.2. Centripetal Force The centripetal force required for a satellite to maintain a circular orbit is given by: \\[F_{\\text{centripetal}} = \\frac{mv^2}{r}\\] Where: - \\(m\\) is the mass of the satellite. - \\(v\\) is the velocity of the satellite. - \\(r\\) is the orbital radius. 1.3. Equating Gravitational and Centripetal Forces For stable orbital motion, the gravitational force equals the centripetal force: \\[\\frac{GMm}{r^2} = \\frac{mv^2}{r}\\] Simplifying this, we get: \\[v = \\sqrt{\\frac{GM}{r}}\\] This is the orbital velocity of the satellite. The orbital period \\(T\\) (the time it takes for the satellite to complete one orbit) is related to the orbital velocity by: \\[T = \\frac{2\\pi r}{v}\\] Substituting the expression for \\(v\\) : \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] This is the orbital period formula for a satellite in a circular orbit. 2. \ud83d\udda5\ufe0f Python Script to Simulate Circular Orbits We can use the derived formulas to simulate the motion of a satellite in a circular orbit. Below is a Python script that simulates and visualizes the orbit of a satellite around a central body. 2.1. Python Code Implementation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant) M = 5.972e24 # kg (mass of Earth, you can adjust for different central bodies) r = 7.5e6 # meters (orbital radius, adjust as needed) T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # Orbital period v = np.sqrt(G * M / r) # Orbital velocity Time settings t = np.linspace(0, T, 1000) # Time array for one complete orbit theta = 2 * np.pi * t / T # Angle in radians Position of the satellite in polar coordinates x = r * np.cos(theta) y = r * np.sin(theta) Plotting the orbit plt.figure(figsize=(6,6)) plt.plot(x, y, label=\"Satellite Orbit\") plt.scatter(0, 0, color='red', label=\"Central Body (Earth)\", s=100) # Earth at origin plt.title(f\"Circular Orbit: Orbital Period = {T/86400:.2f} days\") plt.xlabel(\"X Position (m)\") plt.ylabel(\"Y Position (m)\") plt.gca().set_aspect('equal', adjustable='box') plt.legend() plt.grid(True) plt.show() Output the orbital period and velocity print(f\"Orbital Period: {T/86400:.2f} days\") print(f\"Orbital Velocity: {v/1000:.2f} km/s\") \ud83e\ude90 Verifying Kepler\u2019s Third Law Numerically In this section, we will verify Kepler's Third Law numerically by calculating the orbital period of a planet or moon and comparing it to the values predicted by the law. Kepler's Third Law states that the square of the orbital period ( \\(T^2\\) ) is directly proportional to the cube of the orbital radius ( \\(r^3\\) ). Mathematically, this relationship can be written as: \\[T^2 \\propto r^3\\] In terms of gravitational forces, the orbital period \\(T\\) for a circular orbit is given by: \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] Where: - \\(T\\) is the orbital period . - \\(r\\) is the orbital radius . - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) ). - \\(M\\) is the mass of the central body (e.g., the Sun for planetary orbits). We will now use this formula to verify Kepler\u2019s Third Law numerically for a set of planets and moons. 1. \ud83e\uddee Kepler\u2019s Third Law Formula From Kepler's Third Law, the orbital period for a circular orbit is: \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] 1.1. Gravitational Constant and Units \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) . Mass of the central body ( \\(M\\) ) is given in kg . Orbital radius ( \\(r\\) ) is given in meters . The orbital period \\(T\\) will be calculated in seconds . 2. \ud83d\udd2d Numerical Verification Let\u2019s now calculate the orbital period for different celestial bodies, such as Earth and Jupiter , using Kepler\u2019s Third Law. 2.1. Python Code Implementation The following code will calculate the orbital period for different celestial bodies by using their orbital radii and masses . We will also visualize the relationship between the square of the orbital period ( \\(T^2\\) ) and the cube of the orbital radius ( \\(r^3\\) ). ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant) Celestial bodies data (mass in kg, orbital radius in meters) celestial_bodies = { \"Earth\": {\"M\": 5.972e24, \"r\": 1.496e11}, # Earth: 1 AU \"Jupiter\": {\"M\": 1.898e27, \"r\": 7.785e11}, # Jupiter: 5.2 AU \"Saturn\": {\"M\": 5.683e26, \"r\": 1.429e12}, # Saturn: 9.5 AU \"Mars\": {\"M\": 6.417e23, \"r\": 2.279e11}, # Mars: 1.5 AU } Calculating orbital period using Kepler's Third Law def calculate_orbital_period(M, r): T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # Orbital period in seconds return T Store calculated periods periods = {} for body, data in celestial_bodies.items(): T = calculate_orbital_period(data[\"M\"], data[\"r\"]) periods[body] = T Display the orbital periods in days for body, period in periods.items(): print(f\"Orbital Period of {body}: {period / 86400:.2f} days\") Plotting T^2 vs. r^3 r_values = [data[\"r\"] for data in celestial_bodies.values()] T_squared = [calculate_orbital_period(data[\"M\"], data[\"r\"]) 2 for data in celestial_bodies.values()] r_cubed = [r 3 for r in r_values] plt.figure(figsize=(8,6)) plt.scatter(r_cubed, T_squared, color='blue', label=\"Data Points\") plt.plot(r_cubed, np.poly1d(np.polyfit(r_cubed, T_squared, 1))(r_cubed), color='red', label=\"Best Fit Line\") plt.title(\"Kepler's Third Law: \\(T^2\\) vs \\(r^3\\) \") plt.xlabel(\" \\(r^3\\) (m^3)\") plt.ylabel(\" \\(T^2\\) (s^2)\") plt.legend() plt.grid(True) plt.show() \ud83e\ude90 Plotting Orbital Data In this section, we will create plots that represent the relationships between orbital radius and the square of the orbital period ( \\(T^2\\) ), as well as plot the trajectories of orbits. 1. \ud83e\uddee Kepler\u2019s Third Law Recap We will use Kepler\u2019s Third Law to verify and plot orbital data. Kepler\u2019s Third Law states that the square of the orbital period ( \\(T^2\\) ) is proportional to the cube of the orbital radius ( \\(r^3\\) ). This is mathematically represented as: \\[T^2 \\propto r^3\\] In terms of gravitational forces, the orbital period \\(T\\) for a circular orbit is given by: \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] Where: - \\(T\\) is the orbital period . - \\(r\\) is the orbital radius . - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) ). - \\(M\\) is the mass of the central body . 2. \ud83d\udcca Plotting Orbital Radius vs. \\(T^2\\) 2.1. Mathematical Relationship The relationship between the square of the orbital period ( \\(T^2\\) ) and the cube of the orbital radius ( \\(r^3\\) ) is defined as: \\[T^2 = \\frac{4\\pi^2 r^3}{GM}\\] 2.2. Python Code for Plotting We will calculate the orbital period for different celestial bodies and plot \\(T^2\\) vs. \\(r^3\\) . This will help verify the relationship visually. ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant) Celestial bodies data (mass in kg, orbital radius in meters) celestial_bodies = { \"Earth\": {\"M\": 5.972e24, \"r\": 1.496e11}, # Earth: 1 AU \"Jupiter\": {\"M\": 1.898e27, \"r\": 7.785e11}, # Jupiter: 5.2 AU \"Saturn\": {\"M\": 5.683e26, \"r\": 1.429e12}, # Saturn: 9.5 AU \"Mars\": {\"M\": 6.417e23, \"r\": 2.279e11}, # Mars: 1.5 AU } Calculating orbital period using Kepler's Third Law def calculate_orbital_period(M, r): T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # Orbital period in seconds return T Store calculated periods periods = {} for body, data in celestial_bodies.items(): T = calculate_orbital_period(data[\"M\"], data[\"r\"]) periods[body] = T Plotting T^2 vs. r^3 r_values = [data[\"r\"] for data in celestial_bodies.values()] T_squared = [calculate_orbital_period(data[\"M\"], data[\"r\"]) 2 for data in celestial_bodies.values()] r_cubed = [r 3 for r in r_values] plt.figure(figsize=(8,6)) plt.scatter(r_cubed, T_squared, color='blue', label=\"Data Points\") plt.plot(r_cubed, np.poly1d(np.polyfit(r_cubed, T_squared, 1))(r_cubed), color='red', label=\"Best Fit Line\") plt.title(\"Kepler's Third Law: \\(T^2\\) vs \\(r^3\\) \") plt.xlabel(\" \\(r^3\\) (m^3)\") plt.ylabel(\" \\(T^2\\) (s^2)\") plt.legend() plt.grid(True) plt.show() Orbital parameters (e.g., Earth) r = 1.496e11 # Orbital radius (1 AU) T = calculate_orbital_period(5.972e24, r) # Orbital period for Earth Time array (in seconds) t = np.linspace(0, T, 1000) Angular velocity (omega) omega = 2 * np.pi / T Calculating orbital positions (x and y coordinates) x = r * np.cos(omega * t) y = r * np.sin(omega * t) Plotting the orbital trajectory plt.figure(figsize=(8,6)) plt.plot(x, y, label=\"Orbital Path\") plt.scatter([0], [0], color='red', label=\"Central Body (Sun)\") plt.title(\"Orbital Trajectory of Earth (2D)\") plt.xlabel(\"x (m)\") plt.ylabel(\"y (m)\") plt.gca().set_aspect('equal', adjustable='box') plt.legend() plt.grid(True) plt.show()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deriving-keplers-third-law-for-circular-orbits","text":"Kepler\u2019s Third Law states that the square of the orbital period of a planet is directly proportional to the cube of the semi-major axis of its orbit. For circular orbits, the semi-major axis is equal to the orbital radius. Let's derive this from fundamental physical principles.","title":"\ud83c\udf0c Deriving Kepler\u2019s Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-1-newtons-law-of-universal-gravitation","text":"Newton's Law of Gravitation gives the attractive force between two masses: \\[F_{\\text{gravity}} = G\\frac{Mm}{r^2}\\] \\(G\\) = Gravitational constant \\(M\\) = Mass of the central body (e.g., Earth or Sun) \\(m\\) = Mass of the orbiting object (e.g., satellite or planet) \\(r\\) = Radius of the circular orbit","title":"\u2696\ufe0f Step 1: Newton\u2019s Law of Universal Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-2-centripetal-force-for-circular-motion","text":"Any object in a circular orbit must experience a centripetal force to stay on its path: \\[F_{\\text{centripetal}} = \\frac{mv^2}{r}\\]","title":"\ud83d\udd04 Step 2: Centripetal Force for Circular Motion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-3-equating-gravitational-and-centripetal-forces","text":"Since gravity provides the centripetal force: \\[\\frac{mv^2}{r} = G\\frac{Mm}{r^2}\\] Cancel out \\(m\\) (mass of the orbiting body): \\[\\frac{v^2}{r} = G\\frac{M}{r^2}\\] Multiply both sides by \\(r\\) : \\[v^2 = \\frac{GM}{r}\\]","title":"\u2696\ufe0f Step 3: Equating Gravitational and Centripetal Forces"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-4-express-orbital-velocity-in-terms-of-period","text":"Orbital velocity \\(v\\) is the distance traveled in one orbit divided by the orbital period \\(T\\) : \\[v = \\frac{2\\pi r}{T}\\] Substitute into the velocity equation: \\[\\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{GM}{r}\\] Simplify: \\[\\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r}\\] Multiply both sides by \\(r\\) : \\[\\frac{4\\pi^2 r^3}{T^2} = GM\\]","title":"\u23f1\ufe0f Step 4: Express Orbital Velocity in Terms of Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#final-form-keplers-third-law","text":"Rearranging for \\(T^2\\) : \\[T^2 = \\frac{4\\pi^2}{GM} \\cdot r^3\\] \u2705 This is Kepler's Third Law for circular orbits! \\(T^2 \\propto r^3\\) The constant of proportionality depends on the central mass \\(M\\)","title":"\ud83d\udcd0 Final Form: Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-verification","text":"","title":"\ud83e\uddea Python Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#lets-simulate-this-law-using-python","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"Let's simulate this law using Python."},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of the Earth (kg)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#generate-orbital-radii-in-meters","text":"radii = np.linspace(7e6, 4.2e7, 100) # from ~7000 km to ~42000 km","title":"Generate orbital radii (in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculate-orbital-periods","text":"T_squared = (4 * np.pi 2 * radii 3) / (G * M)","title":"Calculate orbital periods"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting","text":"plt.figure(figsize=(8, 5)) plt.plot(radii, T_squared, label=r' \\(T^2 \\propto r^3\\) ', color='teal') plt.title(\"Kepler\u2019s Third Law: \\(T^2\\) vs \\(r^3\\) \") plt.xlabel(\"Orbital Radius \\(r\\) (m)\") plt.ylabel(\"Orbital Period Squared \\(T^2\\) (s\u00b2)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_1/#physical-meaning-of-keplers-third-law","text":"We previously derived Kepler's Third Law for circular orbits: \\[T^2=\\frac{4\\pi^2}{GM}\\cdot r^3\\] This relationship elegantly connects time (orbital period) with space (orbital radius) through the gravitational constant and the mass of the central body .","title":"\ud83c\udf20 Physical Meaning of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#interpretation-of-each-term","text":"\\(T\\) : Orbital period \u2014 how long it takes to complete one full orbit \\(r\\) : Orbital radius \u2014 the distance between the orbiting body and the central mass \\(G\\) : Universal gravitational constant \u2014 governs strength of gravitational interaction \\(M\\) : Mass of the central body (e.g., Earth, Sun)","title":"\ud83d\udd0d Interpretation of Each Term"},{"location":"1%20Physics/2%20Gravity/Problem_1/#physical-insights","text":"","title":"\ud83e\udde0 Physical Insights"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-gravitational-control-of-motion","text":"The period \\(T\\) depends only on the mass of the central body \\(M\\) and the radius \\(r\\) of the orbit. The orbiting body\u2019s own mass \\(m\\) does not appear in the final formula \u2014 this reflects the equivalence principle.","title":"1. Gravitational Control of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-increased-radius-slower-orbit","text":"From the formula: \\( \\(T\\propto r^{3/2}\\) \\) Larger orbits take significantly longer to complete. This explains why outer planets (like Neptune) move much slower than inner ones (like Mercury).","title":"2. Increased Radius = Slower Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-scaling-and-proportionality","text":"A doubling of \\(r\\) increases \\(T\\) by a factor of: \\( \\(T\\propto(2r)^{3/2}=2^{3/2}\\approx2.83\\) \\) Time grows faster than radius \u2014 orbital systems are not linear.","title":"3. Scaling and Proportionality"},{"location":"1%20Physics/2%20Gravity/Problem_1/#astronomical-applications","text":"","title":"\ud83d\udd2d Astronomical Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-estimating-masses-of-celestial-bodies","text":"Rearranging: \\( \\(M=\\frac{4\\pi^2r^3}{GT^2}\\) \\) If we know the radius and period of a satellite or moon, we can compute the mass of the planet/star it orbits.","title":"\u2705 1. Estimating Masses of Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-predicting-orbital-times","text":"Given a known central mass and radius, we can compute how long any object will take to orbit.","title":"\u2705 2. Predicting Orbital Times"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-comparing-planetary-systems","text":"By comparing \\(T^2/r^3\\) across different systems, we can verify gravitational consistency: \\( \\(\\frac{T^2}{r^3}=\\text{constant for a given }M\\) \\)","title":"\u2705 3. Comparing Planetary Systems"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-demonstration-constant-ratio-t2r3","text":"Let\u2019s confirm that this ratio is constant for Earth-centered orbits. ```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83e\uddee Python Demonstration: Constant Ratio \\(T^2/r^3\\)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants_1","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 M = 5.972e24 # kg (mass of Earth)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-radii-meters","text":"radii = np.linspace(7e6, 4.2e7, 100) T_squared = (4 * np.pi 2 * radii 3) / (G * M) ratio = T_squared / radii**3","title":"Orbital radii (meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot","text":"plt.figure(figsize=(8, 5)) plt.plot(radii, ratio, label=r' \\(\\frac{T^2}{r^3}\\) ', color='purple') plt.title(\"Constant Ratio in Kepler\u2019s Third Law\") plt.xlabel(\"Orbital Radius \\(r\\) (m)\") plt.ylabel(\"Ratio \\(T^2 / r^3\\) (s\u00b2/m\u00b3)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Plot"},{"location":"1%20Physics/2%20Gravity/Problem_1/#astronomical-implications-of-keplers-third-law","text":"Kepler\u2019s Third Law is more than a mathematical curiosity \u2014 it's a powerful tool in astronomy . The relationship: \\[T^2=\\frac{4\\pi^2}{GM}r^3\\] gives us a direct bridge between observable orbital motion and hidden physical properties like mass and distance.","title":"\ud83c\udf0c Astronomical Implications of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#applications-in-astronomy","text":"","title":"\ud83d\udd2d Applications in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-determining-planetary-masses","text":"We can rearrange Kepler\u2019s Third Law to solve for the mass \\(M\\) of the central body: \\[M=\\frac{4\\pi^2r^3}{GT^2}\\]","title":"1. \ud83e\ude90 Determining Planetary Masses"},{"location":"1%20Physics/2%20Gravity/Problem_1/#what-you-need","text":"\\(r\\) : Orbital radius of a satellite or moon (measurable) \\(T\\) : Orbital period of that satellite (measurable) \\(G\\) : Gravitational constant (known)","title":"\u2728 What You Need:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#insight","text":"No need to land or probe a planet to determine its mass. Just observe the orbit of something near it!","title":"\ud83e\udde0 Insight:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-mass-of-earth-from-a-satellite","text":"Satellite orbit radius: \\(r=7.0\\times10^6\\) m Orbital period: \\(T=5800\\) s ```python import numpy as np","title":"\ud83d\udd2c Example: Mass of Earth from a satellite"},{"location":"1%20Physics/2%20Gravity/Problem_1/#given-values","text":"r = 7.0e6 # meters T = 5800 # seconds G = 6.67430e-11 # m^3 kg^-1 s^-2","title":"Given values"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mass-of-earth-calculation","text":"M = (4 * np.pi 2 * r 3) / (G * T**2) print(f\"Estimated mass of Earth: {M:.2e} kg\")","title":"Mass of Earth calculation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extending-keplers-third-law-to-elliptical-orbits-and-non-planetary-bodies","text":"Kepler's Third Law for circular orbits provides an elegant relationship between orbital period \\(T\\) and orbital radius \\(r\\) : \\[T^2=\\frac{4\\pi^2}{GM}r^3\\] However, most real-world orbits are elliptical , not circular, and they often involve non-planetary bodies such as moons, satellites, comets, and even artificial objects. Let's explore how Kepler\u2019s Law extends to these scenarios.","title":"\ud83c\udf20 Extending Kepler\u2019s Third Law to Elliptical Orbits and Non-Planetary Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-keplers-third-law-for-elliptical-orbits","text":"","title":"1. \ud83c\udf11 Kepler\u2019s Third Law for Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#11-elliptical-orbits-overview","text":"For elliptical orbits, the orbital period \\(T\\) is still related to the semi-major axis \\(a\\) of the ellipse, not the instantaneous orbital radius \\(r\\) . The semi-major axis is the average distance between the orbiting body and the central mass.","title":"1.1. Elliptical Orbits Overview"},{"location":"1%20Physics/2%20Gravity/Problem_1/#12-keplers-law-for-elliptical-orbits","text":"Kepler\u2019s Third Law can be generalized to elliptical orbits as: \\[T^2=\\frac{4\\pi^2a^3}{GM}\\] Where: - \\(a\\) : Semi-major axis of the ellipse - \\(M\\) : Mass of the central body - \\(T\\) : Orbital period This is nearly identical to the formula for circular orbits, except now it uses the semi-major axis \\(a\\) instead of the orbital radius \\(r\\) .","title":"1.2. Kepler\u2019s Law for Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#13-why-semi-major-axis","text":"The semi-major axis \\(a\\) represents the average orbital radius and effectively smooths out the elliptical shape. The orbital period \\(T\\) depends on the average distance rather than instantaneous distance, which is why \\(a\\) is used.","title":"1.3. Why Semi-Major Axis?"},{"location":"1%20Physics/2%20Gravity/Problem_1/#14-elliptical-orbit-example","text":"For an elliptical orbit, the orbital period \\(T\\) is the same as it would be for a circular orbit with radius \\(a\\) .","title":"1.4. Elliptical Orbit Example"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-non-planetary-bodies-satellites-comets-and-exoplanets","text":"","title":"2. \ud83d\ude80 Non-Planetary Bodies: Satellites, Comets, and Exoplanets"},{"location":"1%20Physics/2%20Gravity/Problem_1/#21-keplers-law-for-satellites","text":"Satellites orbiting a planet also obey Kepler\u2019s Third Law. The period \\(T\\) of a satellite\u2019s orbit depends on the mass of the planet \\(M\\) and the semi-major axis \\(a\\) of the orbit. Satellite period: \\( \\(T^2=\\frac{4\\pi^2a^3}{GM}\\) \\)","title":"2.1. Kepler\u2019s Law for Satellites"},{"location":"1%20Physics/2%20Gravity/Problem_1/#22-comets-in-the-solar-system","text":"Comets follow highly elliptical orbits, with a semi-major axis \\(a\\) that places them far from the Sun at one extreme (aphelion) and close at the other extreme (perihelion). Their orbital period still follows the same form: \\( \\(T^2=\\frac{4\\pi^2a^3}{GM_{\\text{sun}}}\\) \\) The Sun\u2019s mass is used for calculating the period, even though the comet\u2019s orbit is highly elliptical.","title":"2.2. Comets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#23-exoplanets","text":"Exoplanets orbit distant stars, and their orbital periods depend on the star\u2019s mass \\(M\\) and the orbital semi-major axis \\(a\\) . The orbital period for exoplanets can be calculated using: \\( \\(T^2=\\frac{4\\pi^2a^3}{GM_{\\text{star}}}\\) \\) For exoplanets, the mass of the star is used, and the semi-major axis \\(a\\) refers to the average distance between the exoplanet and its star.","title":"2.3. Exoplanets"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-summary-and-insights","text":"","title":"3. \ud83e\udde0 Summary and Insights"},{"location":"1%20Physics/2%20Gravity/Problem_1/#31-extension-to-elliptical-orbits","text":"Kepler's Third Law holds true for elliptical orbits but uses the semi-major axis \\(a\\) instead of \\(r\\) . The orbital period \\(T\\) depends on the average distance between the orbiting body and the central mass.","title":"3.1. Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#32-non-planetary-bodies","text":"The law applies to satellites , comets , and exoplanets \u2014 objects that are not planets but still obey the same orbital principles. The central mass \\(M\\) changes depending on whether the object is orbiting a planet or a star .","title":"3.2. Non-Planetary Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#33-practical-applications","text":"Satellite Design: Orbital period and semi-major axis allow engineers to design satellites with desired orbital characteristics. Space Missions: For long-range missions (e.g., to outer planets or moons), Kepler\u2019s Law helps estimate travel times. Astronomical Observation: Kepler\u2019s Law is critical for understanding the dynamics of comet orbits, exoplanet discovery, and the motion of moons.","title":"3.3. Practical Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-python-code-for-orbital-period-of-an-elliptical-orbit","text":"Let\u2019s calculate the orbital period \\(T\\) for a comet with a highly elliptical orbit. Given the semi-major axis \\(a\\) and central mass \\(M\\) of the Sun: ```python import numpy as np","title":"4. \ud83e\uddee Python Code for Orbital Period of an Elliptical Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants_2","text":"G = 6.67430e-11 # m^3 kg","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-applications-of-keplers-third-law","text":"Kepler\u2019s Third Law allows us to predict orbital periods and distances for a variety of celestial bodies. By analyzing real-world examples such as the Moon\u2019s orbit around Earth , planetary orbits (like Earth\u2019s orbit around the Sun), and Jupiter\u2019s moons , we can see the practical utility of this fundamental law.","title":"\ud83c\udf0d Real-World Applications of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-moons-orbit-around-earth","text":"","title":"1. \ud83c\udf19 Moon\u2019s Orbit Around Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#11-known-values","text":"Orbital period \\(T_{\\text{moon}}\\) of the Moon: \\(T_{\\text{moon}} = 27.3\\) days (converted to seconds: \\(T_{\\text{moon}} = 27.3 \\times 86400\\) seconds) Average distance between the Earth and the Moon: \\(r = 3.84 \\times 10^8\\) meters Mass of Earth: \\(M_{\\text{Earth}} = 5.972 \\times 10^{24}\\) kg Using Kepler\u2019s Third Law for the Moon\u2019s orbit around Earth: \\[T^2 = \\frac{4\\pi^2 r^3}{GM_{\\text{Earth}}}\\]","title":"1.1. Known Values"},{"location":"1%20Physics/2%20Gravity/Problem_1/#12-orbital-period-calculation","text":"We can calculate the orbital period of the Moon by rearranging the above equation to solve for \\(T\\) : \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM_{\\text{Earth}}}}\\] Let\u2019s calculate this in Python: ```python import numpy as np","title":"1.2. Orbital Period Calculation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants_3","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant) M_earth = 5.972e24 # kg (mass of Earth) r_moon = 3.84e8 # meters (average distance from Earth to Moon)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-calculation-in-seconds","text":"T_moon = 2 * np.pi * np.sqrt(r_moon**3 / (G * M_earth)) T_moon_days = T_moon / (60 * 60 * 24) # Convert from seconds to days print(f\"Orbital period of the Moon: {T_moon_days:.2f} days\")","title":"Orbital period calculation (in seconds)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#computational-task-simulating-circular-orbits","text":"In this section, we will build a Python script or Jupyter Notebook to simulate circular orbits based on Kepler's Third Law. The primary focus will be on simulating a circular orbit of a satellite (or any celestial object) around a central body (e.g., a planet or star).","title":"\ud83d\udef0\ufe0f Computational Task: Simulating Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#objectives","text":"Derive the relationship between orbital period and orbital radius for circular orbits. Implement a Python code to simulate the orbit. Visualize the orbital motion and calculate the orbital period and orbital radius .","title":"Objectives:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-deriving-the-formula-for-circular-orbits","text":"For a circular orbit, we can combine the concepts of centripetal force and gravitational force .","title":"1. \ud83d\udd2d Deriving the Formula for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#11-gravitational-force","text":"The gravitational force acting on a satellite orbiting around a central body is given by: \\[F_{\\text{gravity}} = \\frac{GMm}{r^2}\\] Where: - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) ). - \\(M\\) is the mass of the central body (e.g., the Sun, Earth). - \\(m\\) is the mass of the orbiting satellite . - \\(r\\) is the orbital radius (distance from the center of the central body to the satellite).","title":"1.1. Gravitational Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#12-centripetal-force","text":"The centripetal force required for a satellite to maintain a circular orbit is given by: \\[F_{\\text{centripetal}} = \\frac{mv^2}{r}\\] Where: - \\(m\\) is the mass of the satellite. - \\(v\\) is the velocity of the satellite. - \\(r\\) is the orbital radius.","title":"1.2. Centripetal Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#13-equating-gravitational-and-centripetal-forces","text":"For stable orbital motion, the gravitational force equals the centripetal force: \\[\\frac{GMm}{r^2} = \\frac{mv^2}{r}\\] Simplifying this, we get: \\[v = \\sqrt{\\frac{GM}{r}}\\] This is the orbital velocity of the satellite. The orbital period \\(T\\) (the time it takes for the satellite to complete one orbit) is related to the orbital velocity by: \\[T = \\frac{2\\pi r}{v}\\] Substituting the expression for \\(v\\) : \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] This is the orbital period formula for a satellite in a circular orbit.","title":"1.3. Equating Gravitational and Centripetal Forces"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-python-script-to-simulate-circular-orbits","text":"We can use the derived formulas to simulate the motion of a satellite in a circular orbit. Below is a Python script that simulates and visualizes the orbit of a satellite around a central body.","title":"2. \ud83d\udda5\ufe0f Python Script to Simulate Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#21-python-code-implementation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"2.1. Python Code Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants_4","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant) M = 5.972e24 # kg (mass of Earth, you can adjust for different central bodies) r = 7.5e6 # meters (orbital radius, adjust as needed) T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # Orbital period v = np.sqrt(G * M / r) # Orbital velocity","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#time-settings","text":"t = np.linspace(0, T, 1000) # Time array for one complete orbit theta = 2 * np.pi * t / T # Angle in radians","title":"Time settings"},{"location":"1%20Physics/2%20Gravity/Problem_1/#position-of-the-satellite-in-polar-coordinates","text":"x = r * np.cos(theta) y = r * np.sin(theta)","title":"Position of the satellite in polar coordinates"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-the-orbit","text":"plt.figure(figsize=(6,6)) plt.plot(x, y, label=\"Satellite Orbit\") plt.scatter(0, 0, color='red', label=\"Central Body (Earth)\", s=100) # Earth at origin plt.title(f\"Circular Orbit: Orbital Period = {T/86400:.2f} days\") plt.xlabel(\"X Position (m)\") plt.ylabel(\"Y Position (m)\") plt.gca().set_aspect('equal', adjustable='box') plt.legend() plt.grid(True) plt.show()","title":"Plotting the orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#output-the-orbital-period-and-velocity","text":"print(f\"Orbital Period: {T/86400:.2f} days\") print(f\"Orbital Velocity: {v/1000:.2f} km/s\")","title":"Output the orbital period and velocity"},{"location":"1%20Physics/2%20Gravity/Problem_1/#verifying-keplers-third-law-numerically","text":"In this section, we will verify Kepler's Third Law numerically by calculating the orbital period of a planet or moon and comparing it to the values predicted by the law. Kepler's Third Law states that the square of the orbital period ( \\(T^2\\) ) is directly proportional to the cube of the orbital radius ( \\(r^3\\) ). Mathematically, this relationship can be written as: \\[T^2 \\propto r^3\\] In terms of gravitational forces, the orbital period \\(T\\) for a circular orbit is given by: \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] Where: - \\(T\\) is the orbital period . - \\(r\\) is the orbital radius . - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) ). - \\(M\\) is the mass of the central body (e.g., the Sun for planetary orbits). We will now use this formula to verify Kepler\u2019s Third Law numerically for a set of planets and moons.","title":"\ud83e\ude90 Verifying Kepler\u2019s Third Law Numerically"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-keplers-third-law-formula","text":"From Kepler's Third Law, the orbital period for a circular orbit is: \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\]","title":"1. \ud83e\uddee Kepler\u2019s Third Law Formula"},{"location":"1%20Physics/2%20Gravity/Problem_1/#11-gravitational-constant-and-units","text":"\\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) . Mass of the central body ( \\(M\\) ) is given in kg . Orbital radius ( \\(r\\) ) is given in meters . The orbital period \\(T\\) will be calculated in seconds .","title":"1.1. Gravitational Constant and Units"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-numerical-verification","text":"Let\u2019s now calculate the orbital period for different celestial bodies, such as Earth and Jupiter , using Kepler\u2019s Third Law.","title":"2. \ud83d\udd2d Numerical Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#21-python-code-implementation_1","text":"The following code will calculate the orbital period for different celestial bodies by using their orbital radii and masses . We will also visualize the relationship between the square of the orbital period ( \\(T^2\\) ) and the cube of the orbital radius ( \\(r^3\\) ). ```python import numpy as np import matplotlib.pyplot as plt","title":"2.1. Python Code Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants_5","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#celestial-bodies-data-mass-in-kg-orbital-radius-in-meters","text":"celestial_bodies = { \"Earth\": {\"M\": 5.972e24, \"r\": 1.496e11}, # Earth: 1 AU \"Jupiter\": {\"M\": 1.898e27, \"r\": 7.785e11}, # Jupiter: 5.2 AU \"Saturn\": {\"M\": 5.683e26, \"r\": 1.429e12}, # Saturn: 9.5 AU \"Mars\": {\"M\": 6.417e23, \"r\": 2.279e11}, # Mars: 1.5 AU }","title":"Celestial bodies data (mass in kg, orbital radius in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculating-orbital-period-using-keplers-third-law","text":"def calculate_orbital_period(M, r): T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # Orbital period in seconds return T","title":"Calculating orbital period using Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#store-calculated-periods","text":"periods = {} for body, data in celestial_bodies.items(): T = calculate_orbital_period(data[\"M\"], data[\"r\"]) periods[body] = T","title":"Store calculated periods"},{"location":"1%20Physics/2%20Gravity/Problem_1/#display-the-orbital-periods-in-days","text":"for body, period in periods.items(): print(f\"Orbital Period of {body}: {period / 86400:.2f} days\")","title":"Display the orbital periods in days"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-t2-vs-r3","text":"r_values = [data[\"r\"] for data in celestial_bodies.values()] T_squared = [calculate_orbital_period(data[\"M\"], data[\"r\"]) 2 for data in celestial_bodies.values()] r_cubed = [r 3 for r in r_values] plt.figure(figsize=(8,6)) plt.scatter(r_cubed, T_squared, color='blue', label=\"Data Points\") plt.plot(r_cubed, np.poly1d(np.polyfit(r_cubed, T_squared, 1))(r_cubed), color='red', label=\"Best Fit Line\") plt.title(\"Kepler's Third Law: \\(T^2\\) vs \\(r^3\\) \") plt.xlabel(\" \\(r^3\\) (m^3)\") plt.ylabel(\" \\(T^2\\) (s^2)\") plt.legend() plt.grid(True) plt.show()","title":"Plotting T^2 vs. r^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-orbital-data","text":"In this section, we will create plots that represent the relationships between orbital radius and the square of the orbital period ( \\(T^2\\) ), as well as plot the trajectories of orbits.","title":"\ud83e\ude90 Plotting Orbital Data"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-keplers-third-law-recap","text":"We will use Kepler\u2019s Third Law to verify and plot orbital data. Kepler\u2019s Third Law states that the square of the orbital period ( \\(T^2\\) ) is proportional to the cube of the orbital radius ( \\(r^3\\) ). This is mathematically represented as: \\[T^2 \\propto r^3\\] In terms of gravitational forces, the orbital period \\(T\\) for a circular orbit is given by: \\[T = 2\\pi \\sqrt{\\frac{r^3}{GM}}\\] Where: - \\(T\\) is the orbital period . - \\(r\\) is the orbital radius . - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\, \\text{kg}^{-1} \\, \\text{s}^{-2}\\) ). - \\(M\\) is the mass of the central body .","title":"1. \ud83e\uddee Kepler\u2019s Third Law Recap"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-plotting-orbital-radius-vs-t2","text":"","title":"2. \ud83d\udcca Plotting Orbital Radius vs. \\(T^2\\)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#21-mathematical-relationship","text":"The relationship between the square of the orbital period ( \\(T^2\\) ) and the cube of the orbital radius ( \\(r^3\\) ) is defined as: \\[T^2 = \\frac{4\\pi^2 r^3}{GM}\\]","title":"2.1. Mathematical Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#22-python-code-for-plotting","text":"We will calculate the orbital period for different celestial bodies and plot \\(T^2\\) vs. \\(r^3\\) . This will help verify the relationship visually. ```python import numpy as np import matplotlib.pyplot as plt","title":"2.2. Python Code for Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants_6","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 (gravitational constant)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#celestial-bodies-data-mass-in-kg-orbital-radius-in-meters_1","text":"celestial_bodies = { \"Earth\": {\"M\": 5.972e24, \"r\": 1.496e11}, # Earth: 1 AU \"Jupiter\": {\"M\": 1.898e27, \"r\": 7.785e11}, # Jupiter: 5.2 AU \"Saturn\": {\"M\": 5.683e26, \"r\": 1.429e12}, # Saturn: 9.5 AU \"Mars\": {\"M\": 6.417e23, \"r\": 2.279e11}, # Mars: 1.5 AU }","title":"Celestial bodies data (mass in kg, orbital radius in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculating-orbital-period-using-keplers-third-law_1","text":"def calculate_orbital_period(M, r): T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # Orbital period in seconds return T","title":"Calculating orbital period using Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#store-calculated-periods_1","text":"periods = {} for body, data in celestial_bodies.items(): T = calculate_orbital_period(data[\"M\"], data[\"r\"]) periods[body] = T","title":"Store calculated periods"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-t2-vs-r3_1","text":"r_values = [data[\"r\"] for data in celestial_bodies.values()] T_squared = [calculate_orbital_period(data[\"M\"], data[\"r\"]) 2 for data in celestial_bodies.values()] r_cubed = [r 3 for r in r_values] plt.figure(figsize=(8,6)) plt.scatter(r_cubed, T_squared, color='blue', label=\"Data Points\") plt.plot(r_cubed, np.poly1d(np.polyfit(r_cubed, T_squared, 1))(r_cubed), color='red', label=\"Best Fit Line\") plt.title(\"Kepler's Third Law: \\(T^2\\) vs \\(r^3\\) \") plt.xlabel(\" \\(r^3\\) (m^3)\") plt.ylabel(\" \\(T^2\\) (s^2)\") plt.legend() plt.grid(True) plt.show()","title":"Plotting T^2 vs. r^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-parameters-eg-earth","text":"r = 1.496e11 # Orbital radius (1 AU) T = calculate_orbital_period(5.972e24, r) # Orbital period for Earth","title":"Orbital parameters (e.g., Earth)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#time-array-in-seconds","text":"t = np.linspace(0, T, 1000)","title":"Time array (in seconds)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#angular-velocity-omega","text":"omega = 2 * np.pi / T","title":"Angular velocity (omega)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculating-orbital-positions-x-and-y-coordinates","text":"x = r * np.cos(omega * t) y = r * np.sin(omega * t)","title":"Calculating orbital positions (x and y coordinates)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-the-orbital-trajectory","text":"plt.figure(figsize=(8,6)) plt.plot(x, y, label=\"Orbital Path\") plt.scatter([0], [0], color='red', label=\"Central Body (Sun)\") plt.title(\"Orbital Trajectory of Earth (2D)\") plt.xlabel(\"x (m)\") plt.ylabel(\"y (m)\") plt.gca().set_aspect('equal', adjustable='box') plt.legend() plt.grid(True) plt.show()","title":"Plotting the orbital trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}